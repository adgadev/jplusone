package com.grexdev.nplusone.core.proxy.datasource;

import com.grexdev.nplusone.core.proxy.StateListener;
import lombok.RequiredArgsConstructor;
import lombok.experimental.Delegate;
import lombok.extern.slf4j.Slf4j;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

@Slf4j
@RequiredArgsConstructor
public class ProxyConnection implements Connection {

    @Delegate(excludes = ConnectionOverwrite.class)
    private final Connection delegate;

    private final ProxyContext context;

    private final StateListener stateListener;

    @Override
    public Statement createStatement() throws SQLException {
        if (context.isRecording()) {
            log.debug("===== createStatement 1 ===");
            stateListener.statementExecuted();
        }
        return delegate.createStatement();
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        if (context.isRecording()) {
            log.debug("===== createStatement 2 ===");
            stateListener.statementExecuted();
        }
        return delegate.createStatement(resultSetType, resultSetConcurrency);
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        if (context.isRecording()) {
            log.debug("===== createStatement 3 ===");
            stateListener.statementExecuted();
        }
        return delegate.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        if (context.isRecording()) {
            log.debug("===== prepareStatement 1 ===");
            stateListener.statementExecuted();
        }
        return delegate.prepareStatement(sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        if (context.isRecording()) {
            log.debug("===== prepareStatement 2 ===");
            stateListener.statementExecuted();
        }
        return delegate.prepareStatement(sql, resultSetType, resultSetConcurrency);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        if (context.isRecording()) {
            log.debug("===== prepareStatement 3 ===");
            stateListener.statementExecuted();
        }
        return delegate.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        if (context.isRecording()) {
            log.debug("===== prepareStatement 4 ===");
            stateListener.statementExecuted();
        }
        return delegate.prepareStatement(sql, autoGeneratedKeys);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        if (context.isRecording()) {
            log.debug("===== prepareStatement 5 ===");
            stateListener.statementExecuted();
        }
        return delegate.prepareStatement(sql, columnIndexes);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        if (context.isRecording()) {
            log.debug("===== prepareStatement 6 ===");
            stateListener.statementExecuted();
        }
        return delegate.prepareStatement(sql, columnNames);
    }

    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        if (context.isRecording()) {
            log.debug("===== prepareCall 1 ===");
            stateListener.statementExecuted();
        }
        return delegate.prepareCall(sql);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        if (context.isRecording()) {
            log.debug("===== prepareCall 2 ===");
            stateListener.statementExecuted();
        }
        return delegate.prepareCall(sql, resultSetType, resultSetConcurrency);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        if (context.isRecording()) {
            log.debug("===== prepareCall 3 ===");
            stateListener.statementExecuted();
        }
        return delegate.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public String nativeSQL(String sql) throws SQLException {
        if (context.isRecording()) {
            log.debug("===== nativeSql ===");
            stateListener.statementExecuted();
        }
        return delegate.nativeSQL(sql);
    }

    private interface ConnectionOverwrite {

        Statement createStatement() throws SQLException;

        Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException;

        Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException;


        PreparedStatement prepareStatement(String sql) throws SQLException;

        PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException;

        PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException;

        PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException;

        PreparedStatement prepareStatement(String sql, int columnIndexes[]) throws SQLException;

        PreparedStatement prepareStatement(String sql, String columnNames[]) throws SQLException;


        CallableStatement prepareCall(String sql) throws SQLException;

        CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException;

        CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException;


        String nativeSQL(String sql) throws SQLException;
    }

}
